{"version":3,"file":"static/js/105.7a94c1fb.chunk.js","mappings":"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","sources":["common/Axios.ts","common/Constant.ts","containers/PerformanceTrend/service.ts","containers/PerformanceTrend/styles.ts","containers/PerformanceTrend/index.tsx","core/page.ts"],"sourcesContent":["import { Octokit } from \"@octokit/rest\";\nimport axios from \"axios\";\n\nexport const AxionConfig = axios.create({\n  baseURL:process.env.REACT_APP_DYNAMODB_URL,\n  timeout: 3000,\n  headers: {\n    \"x-api-key\": process.env.REACT_APP_DYNAMODB_TOKEN,\n  },\n  responseType: \"json\",\n  maxRedirects: 21,\n});\n\nexport const OctokitConfig = new Octokit({\n  auth: process.env.REACT_APP_GITHUB_SECRET_TOKEN,\n});\n","export const USE_CASE: string[] = [\"statsd\", \"logs\", \"disk\"];\nexport const REPORTED_METRICS: string[] = [\"procstat_cpu_usage\", \"procstat_memory_rss\"];\nexport const TRANSACTION_PER_MINUTE: number[] = [100, 1000, 5000];\nexport const OWNER_REPOSITORY: string = \"aws\";\nexport const SERVICE_NAME: string = \"AmazonCloudWatchAgent\";\nexport const CONVERT_REPORTED_METRICS_NAME: { [metric_name: string]: string } = {\n  procstat_cpu_usage: \"CPU Usage\",\n  procstat_memory_rss: \"Memory Resource\",\n  procstat_memory_swap: \"Memory Swap\",\n  procstat_memory_vms: \"Virtual Memory\",\n  procstat_memory_data: \"Swap Memory\",\n  procstat_num_fds: \"File Descriptors\",\n  procstat_write_bytes: \"Write Disk Bytes\",\n  net_bytes_sent: \"Net Bytes Sent\",\n  net_packets_sent: \"Net Packages Sent\",\n};","import moment from \"moment\";\nimport { AxionConfig, OctokitConfig } from \"../../common/Axios\";\nimport { OWNER_REPOSITORY, SERVICE_NAME, USE_CASE } from \"../../common/Constant\";\nimport { PerformanceTrendData, PerformanceTrendDataParams, ServiceCommitInformation } from \"./data\";\nexport async function GetPerformanceTrendData(): Promise<PerformanceTrendData[]> {\n  const currentUnixTime = moment().unix();\n  return GetPerformanceTrend({\n    TableName: process.env.REACT_APP_DYNAMODB_NAME || \"\",\n    Limit: USE_CASE.length * 25,\n    IndexName: \"ServiceDate\",\n    KeyConditions: {\n      Service: {\n        ComparisonOperator: \"EQ\",\n        AttributeValueList: [\n          {\n            S: SERVICE_NAME,\n          },\n        ],\n      },\n      CommitDate: {\n        ComparisonOperator: \"LE\",\n        AttributeValueList: [\n          {\n            N: currentUnixTime.toString(),\n          },\n        ],\n      },\n    },\n    ScanIndexForward: false,\n  });\n}\n\nasync function GetPerformanceTrend(params: PerformanceTrendDataParams): Promise<PerformanceTrendData[]> {\n  return AxionConfig.post(\"/\", { Action: \"Query\", Params: params })\n    .then(function (body: { data: { Items: any[] } }) {\n      return body?.data?.Items;\n    })\n    .catch(function (error: unknown) {\n      return Promise.reject(error);\n    });\n}\n\nexport async function GetServiceCommitInformation(commit_sha: string): Promise<ServiceCommitInformation> {\n  return OctokitConfig.request(\"GET /repos/{owner}/{repo}/commits/{ref}\", {\n    owner: OWNER_REPOSITORY,\n    repo: process.env.REACT_APP_GITHUB_REPOSITORY || \"\",\n    ref: commit_sha,\n  })\n    .then(function (value: { data: any }) {\n      return Promise.resolve(value?.data);\n    })\n    .catch(function (error: unknown) {\n      return Promise.reject(error);\n    });\n}","import { useTheme } from \"@mui/material/styles\";\nimport { ApexOptions } from \"apexcharts\";\nimport { OWNER_REPOSITORY } from \"../../common/Constant\";\nimport \"./styles.css\";\n\nexport function BasedOptionChart(): ApexOptions {\n  const theme = useTheme();\n  return {\n    chart: {\n      type: \"line\",\n      toolbar: {\n        show: true,\n        offsetX: -100,\n        offsetY: 5,\n        tools: {\n          selection: false,\n          zoom: false,\n          zoomin: false,\n          zoomout: false,\n          pan: false,\n        },\n      },\n      events: {\n        xAxisLabelClick: function (event: any, context: any, config: { globals: { categoryLabels: number[] }; labelIndex: number }) {\n          const commit_sha = config.globals.categoryLabels.at(config.labelIndex);\n          window.location.assign(`https://github.com/${OWNER_REPOSITORY}/${process.env.REACT_APP_GITHUB_REPOSITORY}/commit/${commit_sha}`);\n        },\n      },\n    },\n    xaxis: {\n      labels: {\n        rotateAlways: true,\n        rotate: -45,\n        style: {\n          colors: [theme.palette.mode === \"light\" ? \"#212121\" : \"#FFFFFF\"],\n          fontSize: \"12px\",\n        },\n        offsetX: 10,\n        offsetY: 5,\n      },\n      tooltip: {\n        enabled: false,\n      },\n      title: {\n        text: \"Commit Sha\",\n        style: {\n          color: theme.palette.mode === \"light\" ? \"#212121\" : \"#FFF\",\n          fontSize: \"14px\",\n        },\n        offsetY: -20,\n      },\n    },\n    colors: [\"#FF6384\", \"#FF9F40\", \"#FFCD56\", \"#0ED87C\", \"#4BC0C0\", \"#36A2EB\", \"#9965FF\", \"#996255\", \"#DF358D\", \"#DF358D\"],\n    yaxis: {\n      min: 0,\n      max: 300,\n      labels: {\n        style: {\n          colors: [theme.palette.mode === \"light\" ? \"#212121\" : \"#FFFFFF\"],\n        },\n      },\n      title: {\n        style: {\n          color: theme.palette.mode === \"light\" ? \"#212121\" : \"#FFF\",\n          fontSize: \"14px\",\n        },\n      },\n    },\n    tooltip: {\n      intersect: true,\n      shared: false,\n      followCursor: true,\n      onDatasetHover: {\n        highlightDataSeries: true,\n      },\n      x: {\n        show: false,\n      },\n    },\n    grid: {\n      show: true,\n      xaxis: {\n        lines: {\n          show: true,\n        },\n      },\n      yaxis: {\n        lines: {\n          show: true,\n        },\n      },\n    },\n    legend: {\n      position: \"right\",\n      showForSingleSeries: true,\n      markers: {\n        width: 20,\n        radius: 2,\n      },\n      offsetX: -40,\n      offsetY: 40,\n      itemMargin: {\n        horizontal: 5,\n        vertical: 0,\n      },\n      labels: {\n        colors: [theme.palette.mode === \"light\" ? \"#212121\" : \"#FFFFFF\"],\n      },\n    },\n    markers: {\n      size: 5,\n    },\n    title: {\n      align: \"center\",\n      offsetX: -30,\n      style: {\n        color: theme.palette.mode === \"light\" ? \"#212121\" : \"#FFF\",\n        fontSize: \"20px\",\n      },\n    },\n  };\n}","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT\nimport {\n    Box,\n    CircularProgress,\n    Container,\n    MenuItem,\n    Paper,\n    Select,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableRow,\n    Typography,\n  } from \"@mui/material\";\n  import { useTheme } from \"@mui/material/styles\";\n  import merge from \"lodash/merge\";\n  import moment from \"moment\";\n  import * as React from \"react\";\n  import Chart from \"react-apexcharts\";\n  import { CONVERT_REPORTED_METRICS_NAME, REPORTED_METRICS, TRANSACTION_PER_MINUTE, USE_CASE } from \"../../common/Constant\";\n  import { usePageEffect } from \"../../core/page\";\n  import { CommitInformation, PerformanceTrendData, TrendData } from \"./data\";\n  import { GetPerformanceTrendData, GetServiceCommitInformation } from \"./service\";\n  import { BasedOptionChart } from \"./styles\";\n  \n  export default function PerformanceTrend(): JSX.Element {\n    usePageEffect({ title: \"Amazon CloudWatch Agent\" });\n    const theme = useTheme();\n    const [{ last_update, hash_categories, trend_data, commits_information }, ] = useStatePerformanceTrend();\n    const [{ data_type }, setDataTypeState] = useStateDataType();\n    const colors = hash_categories.map(() => (theme.palette.mode === \"light\" ? \"#212121\" : \"#FFF\"));\n    return !last_update ? (\n      <Container sx={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", height: \"100vh\" }}>\n        <CircularProgress color=\"inherit\" />\n      </Container>\n    ) : (\n      <Container sx={{ py: \"5vh\", border: \"1px solid\" }} maxWidth=\"lg\">\n        <Container sx={{ mb: 4 }}>\n          <Typography sx={{ mb: 2, fontWeight: \"bold\" }} variant=\"h2\">\n            Performance Trend\n            <hr />\n          </Typography>\n        </Container>\n        <Container sx={{ mb: 4 }}>\n          <TableContainer sx={{ position: \"relative\", mb: 4, display: \"flex\", justifyContent: \"center\", boxShadow: \"unset\" }} component={Paper}>\n            <Table sx={{ borderStyle: \"solid\", width: \"fit-content\", overflow: \"hidden\" }} size=\"small\" aria-label=\"a dense table\">\n              <TableBody>\n                {[\"Last Updated\", \"Data type\"]?.map((name) => (\n                  <TableRow key={name}>\n                    <TableCell sx={{ border: \"1px solid #000\", fontWeight: \"bold\" }}>{name}</TableCell>\n                    <TableCell sx={{ border: \"1px solid #000\", textAlign: \"center\" }}>\n                      {name === \"Last Updated\" ? (\n                        <Typography variant=\"h4\">{last_update}</Typography>\n                      ) : (\n                        <Select\n                          sx={{ height: \"38px\" }}\n                          value={data_type}\n                          onChange={(e: { target: { value: string } }) => setDataTypeState({ data_type: e.target.value })}\n                        >\n                          <MenuItem value={\"Metrics\"}>Metric</MenuItem>\n                          <MenuItem value={\"Logs\"}>Logs</MenuItem>\n                        </Select>\n                      )}\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          <hr />\n        </Container>\n        <Container sx={{ display: \"flex\", flexDirection: \"column\", justifyContent: \"center\", alignItems: \"center\" }}>\n          {REPORTED_METRICS.map((metric) =>\n            TRANSACTION_PER_MINUTE.map((tpm) => (\n              <Box key={`${tpm}${metric}`} sx={{ mb: 4 }}>\n                <Chart\n                  options={merge(BasedOptionChart(), {\n                    xaxis: {\n                      categories: hash_categories,\n                      labels: {\n                        style: {\n                          colors: colors,\n                        },\n                      },\n                    },\n                    yaxis: {\n                      title: {\n                        text: metric === \"procstat_cpu_usage\" ? \"Percent\" : metric === \"procstat_num_fds\" ? \"\" : \"MB\",\n                      },\n                    },\n                    title: {\n                      text: `${data_type} (TPM: ${tpm}) - Avg ${CONVERT_REPORTED_METRICS_NAME[metric]}`,\n                    },\n                    tooltip: {\n                      custom: function (event: {\n                        ctx: { opts: { colors: string[]; series: { name: string }[] } };\n                        series: number[][];\n                        seriesIndex: number;\n                        dataPointIndex: number;\n                        w: { globals: { categoryLabels: string[] } };\n                      }) {\n                        const { ctx, series, seriesIndex, dataPointIndex, w } = event;\n                        const use_case_color = ctx.opts.colors.at(seriesIndex) || \"#000\";\n                        const use_case = ctx.opts.series.at(seriesIndex)?.name;\n                        const selected_data = series[seriesIndex][dataPointIndex];\n                        const selected_hash = w.globals.categoryLabels[dataPointIndex];\n                        const selected_hash_information = commits_information\n                          .filter((c: CommitInformation) => c.sha === selected_hash)\n                          .at(0);\n  \n                        const commit_history = selected_hash_information?.commit_message.replace(/\\n\\r*\\n*/g, \"<br />\");\n                        const commited_by = selected_hash_information?.commit_date + \" commited by @\" + selected_hash_information?.commiter_name;\n                        const commit_data = `<b>${use_case}</b>: ${selected_data}`;\n  \n                        return (\n                          '<div class=\"commit_box\"><div class=\"mb\"><b>' +\n                          selected_hash_information?.sha +\n                          '</b></div><div class=\"mb bold\"><b>' +\n                          commit_history +\n                          '</b></div><div class=\"mb bold\"><b>' +\n                          commited_by +\n                          '</b></div><div class=\"f\">' +\n                          `<div style=\"width: 25px; height: 10px; border: solid #fff 1px; background: ${use_case_color}\"><div/>` +\n                          `<div class=\"ml\">${commit_data}</div>` +\n                          \"</div></div>\"\n                        );\n                      },\n                    },\n                  })}\n                  series={\n                    trend_data.filter((t: TrendData) => t.name === metric && t.data_type === data_type.toLowerCase() && t.data_tpm === tpm)?.at(0)\n                      ?.data_series || []\n                  }\n                  type=\"line\"\n                  width=\"800\"\n                />\n              </Box>\n            ))\n          )}\n        </Container>\n      </Container>\n    );\n  }\n  \n  function useStatePerformanceTrend() {\n    const [state, setState] = React.useState({\n      last_update: undefined as string | undefined,\n      hash_categories: [] as number[],\n      trend_data: [] as TrendData[],\n      commits_information: [] as CommitInformation[],\n    });\n  \n    React.useEffect(() => {\n      (async () => {\n        var performances: PerformanceTrendData[] = await GetPerformanceTrendData();\n        if (performances == null || performances.length === 0) {\n          return;\n        }\n  \n        let trend_data: TrendData[] = [];\n        // With ScanIndexForward being set to true, the trend data are being sorted descending based on the CommitDate.\n        // Therefore, the first data that has commit date is the latest commit.\n        const commit_date = performances.at(0)?.CommitDate.N || \"\";\n        const hash_categories = Array.from(new Set(performances.map((p) => p.CommitHash.S.substring(0, 6)))).reverse();\n        // Get all the information for the hash categories in order to get the commiter name, the commit message, and the releveant information\n        const commits_informaton = await Promise.all(hash_categories.map((hash) => GetServiceCommitInformation(hash)));\n        const final_commits_information: CommitInformation[] = commits_informaton.map((c) => {\n          return { commiter_name: c.author.login, commit_message: c.commit.message, commit_date: c.commit.committer.date, sha: c.sha.substring(0, 6) };\n        });\n  \n        /* Generate series of data that has the following format:\n          data_rate: transaction per minute\n          data_series: [{…}]\n          data_type: metrics or traces or logs\n          name: metric_name\n        */\n        for (let metric of REPORTED_METRICS) {\n          for (let tpm of TRANSACTION_PER_MINUTE) {\n            for (let data_type of [\"metrics\", \"traces\", \"logs\"]) {\n              const typeGrouping = performances.filter((p) => p.DataType.S === data_type);\n              if (typeGrouping.length === 0) {\n                continue;\n              }\n              var data_series: { name: string; data: number[] }[] = [];\n              for (let use_case of USE_CASE) {\n                const data = typeGrouping\n                  .reverse()\n                  .filter((d) => d.UseCase.S === use_case)\n                  .map((p) => Number(Number(p.Results.M[tpm].M[metric].M.Average?.N).toFixed(2)));\n                if (data.length === 0) {\n                  continue;\n                }\n                data_series.push({\n                  name: use_case,\n                  data: data,\n                });\n              }\n              trend_data.push({\n                name: metric,\n                data_type: data_type,\n                data_tpm: tpm,\n                data_series: data_series.reverse(),\n              });\n            }\n          }\n        }\n        setState((prev: any) => ({\n          ...prev,\n          trend_data: trend_data,\n          hash_categories: hash_categories,\n          commits_information: final_commits_information,\n          last_update: moment.unix(Number(commit_date)).format(\"dddd, MMMM Do, YYYY h:mm:ss A\"),\n        }));\n      })();\n    }, [setState]);\n  \n    return [state, setState] as const;\n  }\n  \n  function useStateDataType() {\n    const [state, setState] = React.useState({\n      data_type: \"Metrics\" as \"Metrics\" | \"Traces\" | \"Logs\" | string,\n    });\n  \n    return [state, setState] as const;\n  }","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT\n\nimport * as React from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport function usePageEffect(options?: Options, deps?: React.DependencyList) {\n  const location = useLocation();\n  // Once the page component was rendered, update the HTML document's title\n  React.useEffect(() => {\n    const previousTitle = document.title;\n\n    document.title = location.pathname === \"/\" && options?.title ? `${options.title} ` : \"AWS\";\n\n    return function () {\n      document.title = previousTitle;\n    };\n  }, deps ?? []); /* eslint-disable-line react-hooks/exhaustive-deps */\n}\n\ntype Options = {\n  title?: string;\n  /** @default true */\n  trackPageView?: boolean;\n};"],"names":["AxionConfig","axios","baseURL","process","timeout","headers","responseType","maxRedirects","OctokitConfig","Octokit","auth","USE_CASE","REPORTED_METRICS","TRANSACTION_PER_MINUTE","OWNER_REPOSITORY","SERVICE_NAME","CONVERT_REPORTED_METRICS_NAME","procstat_cpu_usage","procstat_memory_rss","procstat_memory_swap","procstat_memory_vms","procstat_memory_data","procstat_num_fds","procstat_write_bytes","net_bytes_sent","net_packets_sent","GetPerformanceTrendData","_GetPerformanceTrendData","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","currentUnixTime","wrap","_context","prev","next","moment","unix","abrupt","GetPerformanceTrend","TableName","Limit","IndexName","KeyConditions","Service","ComparisonOperator","AttributeValueList","S","CommitDate","N","toString","ScanIndexForward","stop","_x","_GetPerformanceTrend","_callee2","params","_context2","Action","Params","then","body","_body$data","data","Items","catch","error","Promise","reject","GetServiceCommitInformation","_x2","_GetServiceCommitInformation","_callee3","commit_sha","_context3","owner","repo","ref","value","resolve","BasedOptionChart","theme","useTheme","chart","type","toolbar","show","offsetX","offsetY","tools","selection","zoom","zoomin","zoomout","pan","events","xAxisLabelClick","event","context","config","globals","categoryLabels","at","labelIndex","window","location","assign","concat","xaxis","labels","rotateAlways","rotate","style","colors","palette","mode","fontSize","tooltip","enabled","title","text","color","yaxis","min","max","intersect","shared","followCursor","onDatasetHover","highlightDataSeries","x","grid","lines","legend","position","showForSingleSeries","markers","width","radius","itemMargin","horizontal","vertical","size","align","PerformanceTrend","_ref","usePageEffect","_useStatePerformanceT","_React$useState","React","last_update","undefined","hash_categories","trend_data","commits_information","_React$useState2","_slicedToArray","state","setState","_performances$at","performances","commit_date","commits_informaton","final_commits_information","_iterator","_step","_loop","data_series","_context5","sent","length","Array","from","Set","map","p","CommitHash","substring","reverse","all","hash","c","commiter_name","author","login","commit_message","commit","message","committer","date","sha","_createForOfIteratorHelper","metric","_iterator2","_step2","_loop2","_context4","tpm","_loop3","_i","_arr","data_type","typeGrouping","_iterator3","_step3","_loop4","filter","DataType","use_case","d","UseCase","_p$Results$M$tpm$M$me","Number","Results","M","Average","toFixed","push","name","s","n","done","delegateYield","t0","t1","e","f","finish","data_tpm","_objectSpread","format","useStatePerformanceTrend","_useStatePerformanceT3","_useStateDataType","_React$useState3","_React$useState4","useStateDataType","_useStateDataType2","setDataTypeState","_jsxs","Container","sx","py","border","maxWidth","children","_jsx","mb","Typography","fontWeight","variant","TableContainer","display","justifyContent","boxShadow","component","Paper","Table","borderStyle","overflow","TableBody","TableRow","TableCell","textAlign","Select","height","onChange","target","MenuItem","flexDirection","alignItems","_trend_data$filter","_trend_data$filter$at","Box","Chart","options","merge","categories","custom","_ctx$opts$series$at","ctx","series","seriesIndex","dataPointIndex","w","use_case_color","opts","selected_data","selected_hash","selected_hash_information","commit_history","replace","commited_by","commit_data","t","toLowerCase","CircularProgress","deps","useLocation","previousTitle","document","pathname"],"sourceRoot":""}